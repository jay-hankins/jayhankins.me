{"version":3,"sources":["webpack:///./src/templates/blog-post.js"],"names":["BlogPostTemplate","render","post","this","props","data","markdownRemark","siteTitle","site","siteMetadata","title","pageContext","previous","next","hasEmoji","emoji","frontmatter","location","description","excerpt","style","display","fontWeight","marginBottom","color","date","Consumer","theme","transitionName","transitionEnterTimeout","transitionLeaveTimeout","key","darkMode","value","hash","displayValue","height","width","margin","background","lineColor","marginTop","dangerouslySetInnerHTML","__html","html","rhythm","slug","fields","flexWrap","justifyContent","listStyle","padding","to","rel","React","Component","pageQuery"],"mappings":"6TAcMA,E,gLACJC,OAAA,WACE,IAAMC,EAAOC,KAAKC,MAAMC,KAAKC,eACvBC,EAAYJ,KAAKC,MAAMC,KAAKG,KAAKC,aAAaC,MAF7C,EAGoBP,KAAKC,MAAMO,YAA9BC,EAHD,EAGCA,SAAUC,EAHX,EAGWA,KACZC,EAAW,SAAAZ,GACf,IAAMa,EAAQb,EAAKc,YAAYD,MAC/B,QACEA,SAEU,KAAVA,GACU,MAAVA,IAGJ,OACE,kBAAC,IAAD,CAAQE,SAAUd,KAAKC,MAAMa,SAAUP,MAAOH,GAC5C,kBAAC,IAAD,CAAKG,MAAOR,EAAKc,YAAYN,MAAOQ,YAAahB,EAAKiB,UACtD,uBACEC,MAAO,CACLC,QAAQ,QACRC,WAAY,IACZC,aAAc,UACdC,MAAO,qBAGRtB,EAAKc,YAAYS,MAEpB,4BACGX,EAASZ,IAAT,GAAqBA,EAAKc,YAAYD,MACtCD,EAASZ,IAAS,6BAClBA,EAAKc,YAAYN,OAGpB,kBAAC,IAAagB,SAAd,MACG,SAAAC,GAAK,OACJ,kBAAC,IAAD,CACEC,eAAe,aACfC,uBAAwB,IACxBC,uBAAwB,KAExB,yBAAKC,IAAKJ,EAAMK,UACd,kBAAC,IAAD,CACEC,MAAOC,IAAKhC,EAAKc,YAAYN,OAC7ByB,cAAc,EACdC,OAAQ,GACRC,MAAO,IACPC,OAAQ,EACRC,WAAYZ,EAAMK,SAAW,UAAY,UACzCQ,UAAYb,EAAMK,SAAuB,UAAZ,iBAMvC,yBACEZ,MAAO,CAAEqB,UAAW,QACpBC,wBAAyB,CAAEC,OAAQzC,EAAK0C,QAE1C,wBACExB,MAAO,CACLG,aAAcsB,YAAO,MAGzB,kBAAC,IAAD,CAASC,KAAM5C,EAAK6C,OAAOD,OAE3B,wBACE1B,MAAO,CACLC,QAAQ,OACR2B,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGvC,GACC,kBAAC,OAAD,CAAMwC,GAAIxC,EAASmC,OAAOD,KAAMO,IAAI,QAApC,KACKzC,EAASI,YAAYN,QAI9B,4BACGG,GACC,kBAAC,OAAD,CAAMuC,GAAIvC,EAAKkC,OAAOD,KAAMO,IAAI,QAC7BxC,EAAKG,YAAYN,MADpB,U,GAnFiB4C,IAAMC,WA8FtBvD,YAER,IAAMwD,EAAS","file":"component---src-templates-blog-post-js-8f82d818bd424fa89b9b.js","sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport Fragment from 'react';\nimport Barcode from 'react-barcode';\nimport hash from 'hash-sum';\n\nimport Bio from '../components/Bio';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport PGPInfo from '../components/PGPInfo';\nimport { rhythm, scale } from '../utils/typography';\nimport ThemeContext from '../context/ThemeContext';\nimport ReactCSSTransitionReplace from 'react-css-transition-replace';\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark;\n    const siteTitle = this.props.data.site.siteMetadata.title;\n    const { previous, next } = this.props.pageContext;\n    const hasEmoji = post => {\n      const emoji = post.frontmatter.emoji;\n      return !(\n        emoji === null ||\n        emoji === undefined ||\n        emoji === '' ||\n        emoji === ' '\n      );\n    };\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title={post.frontmatter.title} description={post.excerpt} />\n        <p\n          style={{\n            display: `block`,\n            fontWeight: 500,\n            marginBottom: '-2.5rem',\n            color: 'rgb(136,136,136)',\n          }}\n        >\n          {post.frontmatter.date}\n        </p>\n        <h1>\n          {hasEmoji(post) && `${post.frontmatter.emoji}`}\n          {hasEmoji(post) && <br />}\n          {post.frontmatter.title}\n        </h1>\n\n        <ThemeContext.Consumer>\n          {theme => (\n            <ReactCSSTransitionReplace\n              transitionName=\"cross-fade\"\n              transitionEnterTimeout={300}\n              transitionLeaveTimeout={300}\n            >\n              <div key={theme.darkMode}>\n                <Barcode\n                  value={hash(post.frontmatter.title)}\n                  displayValue={false}\n                  height={25}\n                  width={1.5}\n                  margin={0}\n                  background={theme.darkMode ? '#212735' : '#ffffff'}\n                  lineColor={!theme.darkMode ? '#212735' : '#ffffff'}\n                />\n              </div>\n            </ReactCSSTransitionReplace>\n          )}\n        </ThemeContext.Consumer>\n        <div\n          style={{ marginTop: '4rem' }}\n          dangerouslySetInnerHTML={{ __html: post.html }}\n        />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <PGPInfo slug={post.fields.slug} />\n\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </Layout>\n    );\n  }\n}\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 165)\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        emoji\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}